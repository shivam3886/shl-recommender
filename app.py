# -*- coding: utf-8 -*-
"""PY1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bWAPyWoCeQodD_T9xiimgk7F5hO52knT
"""

!pip install -q sentence-transformers

import os

# Create the project folder
os.makedirs("/content/shl_recommender", exist_ok=True)
print("✅ Folder created at /content/shl_recommender")

from google.colab import files

# Upload CSV manually into the folder
uploaded = files.upload()

import os

os.makedirs("/content/shl_recommender", exist_ok=True)
print("✅ Folder ready!")

from google.colab import files

# Run this and select your CSV file from your device
uploaded = files.upload()

import os
os.makedirs("/content/shl_recommender", exist_ok=True)

from google.colab import files

uploaded = files.upload()

import shutil

shutil.move("shl_assessments_sample.csv", "/content/shl_recommender/shl_assessments_sample.csv")

import pandas as pd

df = pd.read_csv("/content/shl_recommender/shl_assessments_sample.csv")
df.head()

!pip install sentence-transformers

from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Load pre-trained model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Create embeddings from descriptions
df['embedding'] = df['Description'].apply(lambda x: model.encode(x))

def recommend_assessments(query, df, model, top_n=5):
    query_embedding = model.encode(query)
    similarities = cosine_similarity([query_embedding], list(df['embedding']))[0]
    top_indices = similarities.argsort()[-top_n:][::-1]
    return df.iloc[top_indices][['Assessment Name', 'URL']]

recommend_assessments("We are hiring for a sales executive with good persuasion and communication skills", df, model)

import shutil

# Move the uploaded file to the project folder
shutil.move("/content/shl_assessments_sample_complete.csv", "/content/shl_recommender/shl_assessments.csv")

import pandas as pd

# Load the updated CSV file
df = pd.read_csv("/content/shl_recommender/shl_assessments.csv")
df.head()

from sentence_transformers import SentenceTransformer

# Load the pre-trained model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Generate embeddings for the descriptions
df['embedding'] = df['Description'].apply(lambda x: model.encode(x, convert_to_tensor=True))

import torch

def recommend_assessments(query, top_k=5):
    # Encode the query into an embedding
    query_embedding = model.encode(query, convert_to_tensor=True)

    # Compute cosine similarities
    similarities = [torch.nn.functional.cosine_similarity(query_embedding, emb, dim=0).item() for emb in df['embedding']]

    # Get top-k results
    top_indices = sorted(range(len(similarities)), key=lambda i: similarities[i], reverse=True)[:top_k]

    # Return top matches
    return df.iloc[top_indices][['Assessment Name', 'URL']]

queries = [
    "We are hiring for a sales executive with good persuasion and communication skills",
    "Looking for a customer support specialist who can handle tough situations and help users",
    "Need a team leader who can motivate and guide their team to success"
]

for query in queries:
    print(f"\nQuery: {query}")
    display(recommend_assessments(query))

"""The recommendation system was evaluated using sample job queries.
The top 5 assessments returned for each query were relevant and matched the job role needs.
For example, for a sales executive role, the system suggested assessments related to motivation,
personality, and reasoning — which are aligned with SHL's use cases.


"""